# Kraken Messaging System - Key Management Documentation

## Key Generation and Distribution Process

### 1. KEY GENERATION (100% LOCAL)

#### ECDH Key Pair Generation:
- **Location**: User's browser (Web Crypto API)
- **Algorithm**: ECDH with P-256 curve
- **Process**: 
  - Private key: 256-bit random number (NEVER leaves device)
  - Public key: 65-byte uncompressed point on elliptic curve
  - Generated using: `window.crypto.subtle.generateKey()`

#### Key Storage:
- **Private Key**: Stored ONLY in browser's localStorage
- **Public Key**: Exported to base64 format for sharing
- **Persistence**: Keys saved locally for reuse across sessions

### 2. PUBLIC KEY DISTRIBUTION (SECURE BROADCAST)

#### How Public Keys Are Sent to Gun.js:

**Step 1: Key Export**
- Public key exported from CryptoKey object to raw bytes
- Converted to base64 string for transmission
- Format: 88-character base64 string

**Step 2: Wallet Authentication**
- Public key associated with user's Ethereum wallet address
- Creates authenticated identity: wallet_address → public_key mapping
- Prevents unauthorized key publishing

**Step 3: Gun.js Network Broadcast**
- Published to path: `gun.get('kraken_keys').get(wallet_address).put(keyData)`
- Data includes: { publicKey, timestamp, address }
- Replicated across multiple Gun.js peers automatically

**Step 4: Network Consensus**
- Multiple Gun.js relay servers store the same key data
- Consensus mechanism ensures data integrity
- Geographic distribution prevents single point of failure

### 3. PUBLIC KEY RETRIEVAL (SECURE FETCH)

#### How Public Keys Are Received from Gun.js:

**Step 1: Network Query**
- Query: `gun.get('kraken_keys').get(target_address).once(callback)`
- Searches across all connected Gun.js peers
- Returns key data with timestamp and verification

**Step 2: Key Validation**
- Validates base64 format (regex check)
- Verifies key length (65 bytes for P-256)
- Checks wallet address association
- Rejects malformed or invalid keys

**Step 3: Consensus Verification**
- Multiple peers must return same key data
- Timestamp verification for freshness
- Automatic retry if peers disagree

**Step 4: Local Caching**
- Valid public keys cached in localStorage
- Cache includes timestamp for expiration
- Reduces network queries for frequent contacts

### 4. SHARED SECRET GENERATION (LOCAL ONLY)

#### ECDH Key Exchange Process:
- **Input**: Your private key + Their public key
- **Algorithm**: ECDH P-256 curve mathematics
- **Output**: 256-bit shared secret (identical for both parties)
- **Location**: Computed locally, never transmitted
- **Usage**: Derives AES-256-GCM encryption key

### 5. SECURITY MECHANISMS

#### Private Key Protection:
- **Never Transmitted**: Private keys NEVER leave the device
- **Memory Only**: Loaded into CryptoKey objects (non-extractable)
- **Local Storage**: Encrypted storage in browser
- **No Server Access**: No backend ever sees private keys

#### Public Key Authentication:
- **Wallet Binding**: Each public key tied to Ethereum address
- **Signature Verification**: Wallet signatures prove ownership
- **Timestamp Validation**: Fresh keys prevent replay attacks
- **Network Consensus**: Multiple peers verify same data

#### Network Security:
- **Decentralized Distribution**: No single server controls keys
- **Geographic Redundancy**: Keys replicated globally
- **Peer Verification**: Multiple sources confirm key validity
- **Automatic Refresh**: Keys updated every 5 minutes

### 6. KEY LIFECYCLE MANAGEMENT

#### Key Generation Triggers:
- First-time user initialization
- Key pair not found in localStorage
- Manual key regeneration (security refresh)

#### Key Refresh Process:
- Automatic refresh every 5 minutes
- New public key published to Gun.js network
- Old shared secrets invalidated
- Fresh key exchange for ongoing conversations

#### Key Expiration:
- Public keys timestamped for freshness validation
- Cached keys expire after 10 minutes
- Failed decryptions trigger key refresh
- Automatic cleanup of old key material

### 7. ATTACK PREVENTION

#### Against Key Substitution:
- Multiple Gun.js peers must consensus on key data
- Wallet address verification prevents unauthorized publishing
- Timestamp validation detects replay attempts
- Geographic distribution makes mass compromise difficult

#### Against Network Interception:
- Public keys are meant to be public (safe to intercept)
- Private keys never transmitted (nothing sensitive to intercept)
- Shared secrets computed locally (never sent over network)
- End-to-end encryption protects message content

#### Against Server Compromise:
- No central key server to compromise
- Decentralized Gun.js network has no single point of failure
- Even if some peers compromised, others maintain integrity
- Wallet-based authentication prevents impersonation

### 8. OFFLINE CAPABILITIES

#### Local Key Operations:
- Key generation works offline
- Encryption/decryption works offline
- Cached public keys enable offline messaging
- Local key storage persists across sessions

#### Network Dependencies:
- Public key publishing requires internet
- Fresh key retrieval needs network access
- Real-time key updates need Gun.js connection
- Graceful degradation to cached keys when offline

### 9. TECHNICAL SPECIFICATIONS

#### Cryptographic Parameters:
- **Curve**: NIST P-256 (secp256r1)
- **Key Size**: 256-bit private keys, 65-byte public keys
- **Hash**: SHA-256 for key derivation
- **Encryption**: AES-256-GCM for message content

#### Network Protocol:
- **Transport**: Gun.js peer-to-peer network
- **Encoding**: Base64 for key serialization
- **Path Structure**: kraken_keys/{wallet_address}
- **Replication**: Automatic across all connected peers

#### Storage Format:
- **Private Keys**: PKCS#8 format in localStorage
- **Public Keys**: Raw format (65 bytes) in base64
- **Metadata**: JSON with timestamp and address
- **Cache**: Structured storage with expiration times

## SUMMARY

The key management system ensures maximum security through:

✅ **Local Generation**: All private keys generated on user's device
✅ **Secure Distribution**: Public keys authenticated via wallet signatures
✅ **Network Consensus**: Multiple peers verify key authenticity
✅ **No Central Authority**: Decentralized key distribution
✅ **Perfect Forward Secrecy**: Unique keys per conversation
✅ **Offline Capability**: Core operations work without internet
✅ **Automatic Refresh**: Keys updated for ongoing security
✅ **Attack Resistance**: Multiple layers prevent compromise

This architecture provides military-grade security while maintaining usability and decentralization principles.